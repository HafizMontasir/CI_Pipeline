name: Frontend CD

on:
  workflow_dispatch:
  pull_request:
    branches:
      -main
    path:
      - 'starter/frontend/**'

env:
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
  ECR_REPOSITORY: frontend
  IMAGE_TAG: ${{ github.sha }}

jobs:
  Lint:
    runs-on: ubuntu-latest
    environment: Development Environment
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Use Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: starter/frontend/package-lock.json
      - name: Install Dependencies
        working-directory: starter/frontend
        run: npm ci
      - name: Run Lint
        working-directory: starter/frontend
        run: npm run lint

  Test:
    runs-on: ubuntu-latest
    needs: Lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Use Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: starter/frontend/package-lock.json
      - name: Install Dependencies
        working-directory: starter/frontend
        run: npm ci
      - name: Run Tests
        working-directory: starter/frontend
        run: CI=true npm test

  Build_and_Push:
    runs-on: ubuntu-latest
    needs: [Lint, Test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Use Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Install Dependencies
        working-directory: starter/frontend
        run: npm ci
      - name: Build Docker image
        run: docker build --build-arg=REACT_APP_MOVIE_API_URL=http://localhost:5000 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        working-directory: starter/frontend
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
      - name: Push Docker image to Amazon ECR
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  Deploy:
    runs-on: ubuntu-latest
    needs: Build_and_Push
    steps:
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name your-cluster-name --region ${{ secrets.AWS_REGION }}
      - name: Deploy to Kubernetes
        run: |
          cd starter/frontend/k8s
          kustomize edit set image frontend=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          kustomize build | kubectl apply -f -





# on:
#   workflow_dispatch:
#   pull_request:
#     branches:
#       -main
#     path:
#       - 'starter/frontend/**'

# jobs:
#   Lint:

#     runs-on: ubuntu-latest
#     environment: Development Environment
#     steps:
#     - name: Checkout repo
#       uses: actions/checkout@v3
#     - name: Use Node.js 18
#       uses: actions/setup-node@v3
#       with:
#         node-version: 18
#         cache: 'npm'
#         cache-dependency-path: starter/frontend/package-lock.json
#     - name: Install Dependencies
#       working-directory: starter/frontend
#       run: npm ci

#     - name: Checkout Run Lint
#       run: cd starter/frontend && npm run lint

#   Test:
#     runs-on: ubuntu-latest

#     steps:
#     - name: Checkout repo
#       uses: actions/checkout@v3
#     - name: Use Node.js 18
#       uses: actions/setup-node@v3
#       with:
#         node-version: 18
#         cache: 'npm'
#         cache-dependency-path: starter/frontend/package-lock.json
#     - name: Install Dependencies
#       working-directory: starter/frontend
#       run: npm ci
#     - name: Test
#       run: cd starter/frontend && npm run test

#   Build:
#     needs: [Lint, Test]
#     runs-on: ubuntu-latest
#     steps:
#       - name: Check the Repository
#         uses: actions/checkout@v3
#       - name: Use Node.js 18
#         uses: actions/setup-node@v3
#         with:
#           node-version: 18
#           cache: 'npm'
#           cache-dependency-path: starter/frontend/package-lock.json
#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
#           aws-region: us-east-1
#       - name: Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v2
#       - name: Build and Push Docker Image
#         working-directory: starter/frontend
#         env:
#           IMAGE_TAG: latest
#           REPO_NAME: frontend
#         run: |
#           docker build --build-arg=REACT_APP_MOVIE_API_URL=http://localhost:5000 --tag 669172573612.dkr.ecr.us-east-1.amazonaws.com/$REPO_NAME:$IMAGE_TAG .
#           docker push 669172573612.dkr.ecr.us-east-1.amazonaws.com/$REPO_NAME:$IMAGE_TAG
#       - name: Configure Kubeconfig
#         run: |
#           aws eks update-kubeconfig --name udacity-project4 --region us-east-1
#       - name: Deploy Docker Image to Amazon EKS
#         working-directory: starter/frontend/k8s
#         env:
#           IMAGE_TAG: latest
#           REPO_NAME: frontend
#         run: |
#           kustomize edit set image frontend=669172573612.dkr.ecr.us-east-1.amazonaws.com/$REPO_NAME:$IMAGE_TAG
#           kustomize build | kubectl apply -f -
